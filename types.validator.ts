/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from 'util';
import Ajv, { ValidateFunction as AjvValidateFunc, ErrorObject } from 'ajv';
import { Query } from './types';
export const ajv = new Ajv({
  // allErrors: true,
  // coerceTypes: false,
  // unicode: true,
  // useDefaults: true,
});

// eslint-disable-next-line @typescript-eslint/no-var-requires
ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));
import * as QuerySchema from './json-schema/QuerySchema.json';

export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<AjvValidateFunc, 'errors'>;

export const isQuery = ajv.compile(QuerySchema) as ValidateFunction<Query>;

export default function validate(value: unknown): Query {
  if (isQuery(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isQuery.errors!.filter((e: ErrorObject) => e.keyword !== 'if'),
        { dataVar: 'Query' }
      ) +
        '\n\n' +
        inspect(value)
    );
  }
}
